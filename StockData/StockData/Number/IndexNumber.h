#pragma once
#ifndef _INDEXNUMBER_H
#define _INDEXNUMBER_H
//#include "stdafx.h"
#include <Windows.h>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include "../CommonFunction.h"

//读出目标文件允许的最大行数
#define MAX_FILE_LINE_READFROM_RANK 100
#define  MAX_FILE_LINE_READFROM_COLUMN 10000

//定义列标签的名称
#define File_Close_INDEX "close"
#define File_Date_INDEX "date"
#define File_Open_INDEX "open"
#define File_High_INDEX "high"
#define File_Low_INDEX "low"
#define File_Volume_INDEX "volume"

//MACD
#define MACD_MA12  "Ma12"
#define MACD_MA26  "Ma26"
#define MACD_DIFF "Diff"
#define MACD_DEA "DEA"
#define MACD_BAR "BAR"

//KDJ
#define KDJ_K "K_OF_KDJ"
#define KDJ_D "D_OF_KDJ"
#define KDJ_J "J_OF_KDJ"

//线程函数
DWORD WINAPI ThreadToUpdatefile(PVOID pvParam);

typedef  float tySData;
class CNumberManager;
//////////////////////////////////////////////////////////////////////////
//时间 年 月 日
//
//////////////////////////////////////////////////////////////////////////
class CDate
{
public:
	CDate(string day)
	{
	}
	CDate()
	{
	}
	int iYear;
	int iMonth;
	int iDay;
};

//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
struct CDateData
{
public:
	CDateData():fOpen(0.0f),fClode(0.0f),fHigh(0.0f),fLow(0.0f){}
	CDate mDate;
	tySData fOpen;
	tySData fClode;
	tySData fHigh;
	tySData fLow;
	tySData operator [] (string index);
};
//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
struct NumberTreadPara
{
	CNumberManager* pmacd_;
	string filename_;
};
//////////////////////////////////////////////////////////////////////////
//
//
//////////////////////////////////////////////////////////////////////////
class CNumberManager
{
public:
	CNumberManager(void);
	~CNumberManager(void);

	//////////////////////////////////////////////////////////////////////////
	//读CSV文件中对应列的数据
	//filepath:文件路径
	//strTittle：需要读出的列名
	//////////////////////////////////////////////////////////////////////////
	vector<tySData>  ReadColumnStringFormFile(string filepath, string strTittle);
	//////////////////////////////////////////////////////////////////////////
	//增加对应的列到CSV文件中
	//FilePath：文件路径
	//vMACDValue:要加入的列数据
	//tittle:列名
	//////////////////////////////////////////////////////////////////////////
	void ReSavefileColumn(string FilePath, vector<tySData> vMACDValue, string tittle);


	//////////////////////////////////////////////////////////////////////////
	//strPath:文件路径
	//////////////////////////////////////////////////////////////////////////
	virtual void UpdateFileColumn(string strPath);

	//////////////////////////////////////////////////////////////////////////
	//读CSV文件中对应行的数据
	//filepath:文件路径
	//strTittle：需要读出的行名
	//////////////////////////////////////////////////////////////////////////
	vector<tySData>  ReadRanksStringFormFile(string filepath, string strTittle);
	//////////////////////////////////////////////////////////////////////////
	//增加对应的行保存到CSV文件中
	//FilePath：文件路径
	//vMACDValue:要加入的行数据
	//tittle:行名
	//////////////////////////////////////////////////////////////////////////
	void ReSavefileRanks(string FilePath, vector<tySData> vMACDValue, string tittle);

	//////////////////////////////////////////////////////////////////////////
	//更新文件夹里所有CSV文件的指标值(数据按行排)
	//strPath:文件路径
	//////////////////////////////////////////////////////////////////////////
	virtual void UpdatePathFilesRanks(string strPath);
	//////////////////////////////////////////////////////////////////////////
	//更新CSV文件里的指标值(数据按行排)
	//strPath:文件路径
	//////////////////////////////////////////////////////////////////////////
	virtual void UpdateFileRanks(string strfilename);

	//////////////////////////////////////////////////////////////////////////
	//按行读文件中的数据并返回
	//
	//////////////////////////////////////////////////////////////////////////
	vector<string> ReadDataFromCSVFileRanks(const string& fullFilePath);
	//////////////////////////////////////////////////////////////////////////
	//从CSV文件读取数据,并切割成二维数组形式
	//////////////////////////////////////////////////////////////////////////
	vector<vector<string>> ReadDataFromCSVFileAndCutRanks(const string& fullFilePath/*,const vector<string>& StringToCut*/, string strCutIndex = ",");
	//////////////////////////////////////////////////////////////////////////
	//保存二维数组到CSV文件
	//////////////////////////////////////////////////////////////////////////
	bool SaveDataToCSVFile(const string& fullFilePath,const vector<vector<string>>& savedata);


	//////////////////////////////////////////////////////////////////////////
	//
	//
	//////////////////////////////////////////////////////////////////////////
	vector<string> ReadDataFromClickBoardRanks();
	//////////////////////////////////////////////////////////////////////////
	//从剪切板读取数据,并切割成二维数组形式
	//////////////////////////////////////////////////////////////////////////
	vector<vector<string>> ReadDataFromClickBoardAndCutRanks();
	//////////////////////////////////////////////////////////////////////////
	//保存二维数组到剪切板
	//////////////////////////////////////////////////////////////////////////
	bool SaveDataToClickBoard(vector<vector<string>>& savedata);

	//////////////////////////////////////////////////////////////////////////
	//新建线程
	//filename：文件路径
	//
	//////////////////////////////////////////////////////////////////////////
	void RunTread(string filePath);

	int TreadNum;
};



#endif
