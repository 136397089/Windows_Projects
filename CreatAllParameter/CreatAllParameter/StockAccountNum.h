
#ifndef _STOCKACCOUNTNUM_H
#define _STOCKACCOUNTNUM_H
#include <list>
#include <string>
#include <fstream>
#include "DateTool.h"
using namespace std;
#pragma once

//一次交易
struct TransactionData
{
	//bool _IsBay;//是不是买入
	int _iStockCode;
	string _strStockCode;
	CDate BuyDate;
	float BuyPrice;//交易价格
	CDate SellDate;
	float SellPrice;//交易价格
	float TransactionVolume;//交易量,小于0表示卖出，大于0表示买入
};
//类只对一个股票操作
class CStockAccount
{
public:
	CStockAccount(const float& InitCapital);

	~CStockAccount();

private:
	CStockAccount(){};
public:
	//////////////////////////////////////////////////////////////////////////
	//初始化账号
	//////////////////////////////////////////////////////////////////////////
	bool Inition(float InitialFunding);
	//////////////////////////////////////////////////////////////////////////
	//修改仓位到目标仓位
	//////////////////////////////////////////////////////////////////////////
	bool ChangeStockPosition(const float& currentPrice, const string& Date, const float& tagePosition);
	//////////////////////////////////////////////////////////////////////////
	//卖出所有
	//////////////////////////////////////////////////////////////////////////
	bool SellOutAll(const float& currentPrice, const string& Date);
	//////////////////////////////////////////////////////////////////////////
	//全部买入
	//////////////////////////////////////////////////////////////////////////
	bool AllIn(const float& currentPrice, const string& Date);
	//////////////////////////////////////////////////////////////////////////
	//获取之前的所有操作
	//////////////////////////////////////////////////////////////////////////
	list<TransactionData> GetAllBusiness();
	//////////////////////////////////////////////////////////////////////////
	//获取当前仓位
	//////////////////////////////////////////////////////////////////////////
	float GetPosition(float price);
	//////////////////////////////////////////////////////////////////////////
	//获取当前仓位
	//////////////////////////////////////////////////////////////////////////
	float GetStockQuantityOwned();
	//////////////////////////////////////////////////////////////////////////
	//获取当前资产总值
	//////////////////////////////////////////////////////////////////////////
	float GetCurrentAssets(float currentPrice);
	//////////////////////////////////////////////////////////////////////////
	//获取当前收益率 正值为盈利，负值为亏损
	//////////////////////////////////////////////////////////////////////////
	float GetProceedsRate(float currentPrice);
	//////////////////////////////////////////////////////////////////////////
	//获取最后一次买入价格
	//////////////////////////////////////////////////////////////////////////
	TransactionData GetLastTransaction();
	//////////////////////////////////////////////////////////////////////////
	//打印出所有的操作
	//////////////////////////////////////////////////////////////////////////
	void PrintAllBusiness(const string& filePath);
	//////////////////////////////////////////////////////////////////////////
	//获得最后一次出错信息
	//////////////////////////////////////////////////////////////////////////
	string GetLastError();
private:
	//////////////////////////////////////////////////////////////////////////
	//进行一次买卖操作
	//////////////////////////////////////////////////////////////////////////
	bool Trading(const TransactionData& mbusiness);
	//////////////////////////////////////////////////////////////////////////
	//
	//////////////////////////////////////////////////////////////////////////
	bool BuyStock(const TransactionData& mbusiness);
	//////////////////////////////////////////////////////////////////////////
	//
	//////////////////////////////////////////////////////////////////////////
	bool SellStock(const TransactionData& mbusiness);
	//初始变量，不变
	float _InitCapital;//初始的资金
	//过程变量，可变
	float _CurrentAvailableCapital;//当前的可用资金
	list<TransactionData> _AllBusiness;//发生过的所有操作
	TransactionData HoldStock;//
	string _LastError;//
	int _minVolu;//单笔成交基数
};


class CSimpleAccount
{
public:
	CSimpleAccount(const string& Stockcode);
	CSimpleAccount(){};
	~CSimpleAccount();
	void Inition(const string& Stockcode);
	bool BuyStock(StockDataType price, const CDate& date);
	bool SellStock(StockDataType price, const CDate& date);
	StockDataType GetCurrentIncomeRate();
	StockDataType CheckHoldIncomeRate(StockDataType CurrentPrice);
	void GetIncomeRateList(vector<StockDataType>& rateList);
	unsigned int GetCount();
	bool IsHoldStock();
	void ClearHoldStockPrice();
private:
	TransactionData HoldStock;//
	list<TransactionData> _AllBusiness;//发生过的所有操作


};

#endif


