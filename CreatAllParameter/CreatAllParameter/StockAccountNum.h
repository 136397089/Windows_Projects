
#ifndef _STOCKACCOUNTNUM_H
#define _STOCKACCOUNTNUM_H
#include <list>
#include <string>
#include <fstream>
using namespace std;
#pragma once
typedef double 双精度浮点;
typedef string 标准字符串;
//一次交易
struct 交易数据
{
	//bool _IsBay;//是不是买入
	标准字符串 _交易日期;
	双精度浮点 _成交量;//交易量,小于0表示卖出，大于0表示买入
	双精度浮点 _交易价格;//交易价格
};
//类只对一个股票操作
class CStockAccount
{
public:
	CStockAccount(const string& StockDate, const double& InitCapital);
	//CStockAccountNum(const CStockAccountNum& stockAccount);
	~CStockAccount();

private:
	CStockAccount();
public:
	//////////////////////////////////////////////////////////////////////////
	//初始化账号
	//////////////////////////////////////////////////////////////////////////
	bool 初始化账号函数(double 初始资金);
	//////////////////////////////////////////////////////////////////////////
	//修改仓位到目标仓位
	//
	//////////////////////////////////////////////////////////////////////////
	bool ChangeStockPosition(const double& currentPrice, const string& Date, const double& tagePosition);
	//////////////////////////////////////////////////////////////////////////
	//卖出所有
	//////////////////////////////////////////////////////////////////////////
	bool SellOutAll(const double& currentPrice, const string& Date);
	//////////////////////////////////////////////////////////////////////////
	//全部买入
	//////////////////////////////////////////////////////////////////////////
	bool AllIn(const double& currentPrice, const string& Date);
	//////////////////////////////////////////////////////////////////////////
	//获取之前的所有操作
	//////////////////////////////////////////////////////////////////////////
	list<交易数据> GetAllBusiness();
	//////////////////////////////////////////////////////////////////////////
	//获取当前仓位
	//////////////////////////////////////////////////////////////////////////
	double GetPosition();
	//////////////////////////////////////////////////////////////////////////
	//获取当前资产总值
	//////////////////////////////////////////////////////////////////////////
	double GetCurrentAssets(double currentPrice);
	//////////////////////////////////////////////////////////////////////////
	//获取当前收益率 正值为盈利，负值为亏损
	//////////////////////////////////////////////////////////////////////////
	double GetProceedsRate(double currentPrice);
	//////////////////////////////////////////////////////////////////////////
	//获取最后一次交易价格
	//////////////////////////////////////////////////////////////////////////
	double GetLastPrice();
	//////////////////////////////////////////////////////////////////////////
	//打印出所有的操作
	//////////////////////////////////////////////////////////////////////////
	void PrintAllBusiness(const string& filePath);
	//////////////////////////////////////////////////////////////////////////
	//获得最后一次出错信息
	//////////////////////////////////////////////////////////////////////////
	string GetLastError();
private:
	//////////////////////////////////////////////////////////////////////////
	//进行一次买卖操作
	//////////////////////////////////////////////////////////////////////////
	bool _进行交易(const 交易数据& mbusiness);
	//初始变量，不变
	string _OwnStockDate;//操作的股票代码
	double _InitCapital;//初始的资金
	//过程变量，可变
	double _CurrentAvailableCapital;//当前的可用资金
	double _OwnStock;//拥有的股票数量
	double _CurrentPosition;//
	//过程记录
	list<交易数据> _AllBusiness;//发生过的所有操作
	//
	string _LastError;
	//最后一次交易价格
	double _lastPrise;
};

#endif


